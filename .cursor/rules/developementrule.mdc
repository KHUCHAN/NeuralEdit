---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

1. 시스템 개요
목표:

Excel 파일을 업로드하면 각 Sheet가 DBMS의 테이블처럼 인식되어 그리드에 즉시 표시되고, 사용자가 그리드에서 직접 데이터를 편집하거나 SQL 쿼리를 통해 데이터 수정이 가능하도록 한다.

향후 LLM(대형 언어 모델)을 연계하여 자연어 명령으로 데이터 편집을 지원한다.

핵심 흐름:

파일 업로드: 사용자가 Excel 파일(.xlsx, .xls)을 업로드

데이터 파싱: 각 Sheet의 데이터를 파싱하여 인메모리(사용자 메모리) 데이터로 저장

그리드 표시: 각 Sheet(테이블)가 별도의 그리드 컴포넌트에 즉시 렌더링

데이터 편집: 인라인 편집 및 SQL 쿼리 인터페이스를 통해 데이터 수정

실시간 업데이트: 편집 결과가 즉시 반영되어 그리드에 업데이트

2. 기능 요구 사항 (Functional Requirements)
2.1 파일 업로드 및 파싱
Excel 파일을 업로드하면 자동으로 파싱되어 각 Sheet의 데이터가 추출됨.

각 Sheet는 별도의 테이블(그리드)로 매핑됨.

2.2 데이터 그리드 표시
업로드 직후 각 테이블의 데이터가 실시간으로 그리드에 표시되어야 함.

그리드는 열 정렬, 필터링, 페이징 등 기본 UI/UX 기능을 지원.

반응형 디자인 적용(데스크탑/모바일 대응).

2.3 데이터 편집 및 업데이트
인라인 편집: 사용자가 직접 셀을 클릭해 데이터를 수정할 수 있음.

SQL 쿼리 인터페이스: 고급 사용자를 위한 SQL 편집 기능 제공 (INSERT, UPDATE, DELETE 등).

변경 사항은 즉시 인메모리 데이터와 그리드에 반영됨.

데이터 무결성 검증 및 에러 핸들링 구현.

2.4 인메모리 데이터 관리
업로드된 Excel 데이터는 서버(또는 클라이언트) 메모리 내에 저장되어 빠른 접근 및 편집 지원.

다중 사용자 환경을 고려하여 세션별 데이터 격리 설계.

2.5 향후 LLM 통합
자연어 명령(예: “A열의 값을 모두 100으로 변경”)을 SQL 쿼리로 변환할 수 있는 LLM 모듈을 설계.

LLM 모듈은 백엔드의 독립 서비스로 연계하여 기존 편집 기능과 통합.

3. 비기능 요구 사항 (Non-functional Requirements)
성능:

대용량 Excel 파일도 빠르게 파싱 및 렌더링.

편집 후 업데이트 반영 지연 최소화.

확장성:

단일 사용자 중심에서 다중 사용자 확장 가능하도록 설계.

LLM 및 추가 기능 모듈화.

보안:

파일 업로드 시 바이러스 검사 및 데이터 검증.

SQL 쿼리 실행 시 인젝션 방지 및 에러 처리.

유지보수성:

코드 모듈화, 주석 및 문서화를 통한 향후 유지보수 용이성 보장.

사용성:

직관적인 UI/UX, 명확한 에러 메시지 및 사용 가이드 제공.

호환성:

최신 웹 브라우저와 Node.js 환경에서 안정적 동작.

4. 기술 스택 및 도구
4.1 프론트엔드
언어: TypeScript

프레임워크: React

스타일링: Tailwind CSS

그리드 컴포넌트: react-table, AG-Grid 또는 커스텀 구현

Excel 파싱: SheetJS(xlsx) (클라이언트 또는 백엔드 사용)

4.2 백엔드
플랫폼: Node.js

프레임워크: Express (또는 Fastify)

인메모리 데이터 관리: SQLite in-memory 모드 또는 맞춤형 스토어

Excel 파싱: xlsx 라이브러리 (node-xlsx, SheetJS 등)

SQL 인터페이스: SQL 쿼리 빌더(예: Knex.js) 또는 자체 SQL 파서

4.3 향후 LLM 연동
LLM API: OpenAI API 등 자연어 처리 API 연동

연동 방식: 백엔드 모듈로 구현하여 SQL 변환 및 실행 후 결과 반환